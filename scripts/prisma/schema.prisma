generator client {
    provider             = "prisma-client-js"
    interface            = "asyncio"
    recursive_type_depth = 5
    previewFeatures      = ["postgresqlExtensions"]
}

datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    // Prisma migrations run through the direct URL. Replace as needed.
    directUrl  = env("DATABASE_URL")
    extensions = [pgcrypto]
}

model elements {
    id        String   @id @default(dbgenerated("gen_random_uuid()"))
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    threadId  String?
    stepId    String
    metadata  Json
    mime      String?
    name      String
    objectKey String?
    url       String?
    step      steps    @relation(fields: [stepId], references: [id], onDelete: Cascade)
    thread    threads? @relation(fields: [threadId], references: [id], onDelete: Cascade)

    chainlitKey String?
    display     String?
    size        String?
    language    String?
    page        Int?
    props       Json?

    @@index([stepId])
    @@index([threadId])
}

model users {
    id         String   @id @default(dbgenerated("gen_random_uuid()"))
    createdAt  DateTime @default(now())
    updatedAt  DateTime @default(now()) @updatedAt
    metadata   Json
    identifier String
    threads    threads[]

    @@unique([identifier])
    @@index([identifier])

    subscriptions Subscription[]
}

model feedbacks {
    id        String   @id @default(dbgenerated("gen_random_uuid()"))
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    stepId String?
    Step   steps?   @relation(fields: [stepId], references: [id])

    name  String
    value Float

    comment String?

    @@index(createdAt)
    @@index(name)
    @@index(stepId)
    @@index(value)
    @@index([name, value])
}

model steps {
    id        String   @id @default(dbgenerated("gen_random_uuid()"))
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
    parentId  String?
    threadId  String?

    input     String?
    metadata  Json
    name      String?
    output    String?
    type      StepType
    showInput String?  @default("json")
    isError   Boolean? @default(false)

    startTime DateTime
    endTime   DateTime

    elements elements[]
    parent   steps?      @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
    children steps[]     @relation("ParentChild")
    thread   threads?    @relation(fields: [threadId], references: [id], onDelete: Cascade)
    Feedback feedbacks[]

    @@index([createdAt])
    @@index([endTime])
    @@index([parentId])
    @@index([startTime])
    @@index([threadId])
    @@index([type])
    @@index([name])
    @@index([threadId, startTime, endTime])
}

model threads {
    id        String    @id @default(dbgenerated("gen_random_uuid()"))
    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now()) @updatedAt
    deletedAt DateTime?

    name     String?
    metadata Json
    tags     String[] @default([])

    elements elements[]
    userId   String?
    User     users?     @relation(fields: [userId], references: [id])
    steps    steps[]

    @@index([createdAt])
    @@index([name])
}

model SubTypes {
  id    Int     @id @default(autoincrement())
  title String
  cost  Float
  
  subs Subscription[]
}

model Subscription {
  id         String   @id @default(uuid())
  userId     String
  subTypeId  Int
  paymentId  String @unique
  startsAt   DateTime @default(now())
  endsAt     DateTime @default(now())
  autoRenew  Boolean  @default(true)
  
  user      users     @relation(fields: [userId], references: [id])
  subType   SubTypes @relation(fields: [subTypeId], references: [id])
  payment   Payment  @relation(fields: [paymentId], references: [id])
}

model Payment {
  id          String   @id @default(uuid())
  amount      Float
  operationId String   @db.VarChar(100)
  
  subscription Subscription?
}

enum StepType {
    assistant_message
    embedding
    llm
    retrieval
    rerank
    run
    system_message
    tool
    undefined
    user_message
}
